1.1 Suponha que você tenha uma lista de 128 nomes e esteja fazendo uma pesquisa binária. 
Qual seria o número máximo de etapas que você levaria para encontrar o número desejado?

Resposta:
Pesquisa binária -> log n 
=> log 128 => 2^x = 128
Portanto: log 128 = 7

1.2 Suponha que você duplique o tamanho da lista. Qual seria o número máximo de etapas agora?

Resposta:
Pesquisa binária -> log n
=> log 256 => 2^y = 256
Portanto: log 256 = 8

Forneça o tempo de execução para cada um dos casos a seguir em termos da notação Big O.

1.3 Você tem um nome e deseja encontrar o número de telefone para esse nome em uma agenda telefônica

Resposta: Pesquisa binária -> O(log n)

1.4 Você tem um número de telefone e deseja encontrar o dono dele em uma agênda telefônica. (Dica: Deve procurar pela agenda inteira!)

Resposta: Pesquisa simples -> O(n)

1.5 Você quer ler o número de cada pessoa da agenda telefônica.

Resposta: Pesquisa simples -> O(n)

1.6 Você quer ler os números apenas dos nomes que começam com "A". (Esse algoritmo envolve conceitos que são abordados 
mais produndamente no Capítulo 4. Leia a resposta e ficará surpreso!)

Resposta resolvida: O(n). Você pode pensar: "Só estou fazendo isso para 1 dentre 26 caracteres, portanto o tempo de 
execução deve ser O(n/26)." Uma regra simples é a de ignorar números que são somados, subtraídos, multiplicados ou 
divididos. Nenhum desses são tempos de execução Big O: O(n + 26), O(n - 26), O(n * 26), O(n / 26). 
Eles são todos o mesmo que O(n)! Por quê? Se você está com dúvidas, vá para "Notação Big O revisada", no Capítulo 4, e 
leia a parte sobre constantes na notação Big O (uma constante é apenas um número, 26 era a constante da questão).